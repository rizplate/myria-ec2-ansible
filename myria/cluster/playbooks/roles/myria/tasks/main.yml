---
# configuring myria on the coordinator node
# clone git repo, build, create deployment config, setup and launch cluster.

- name: Installing packages
  apt: name="{{item}}" update_cache=yes
  with_items:
    - git
    - mono-complete
  tags:
    - provision

- name: Create Myria source directory
  file: path={{myria_path}} state=directory owner={{myria_user}} group={{myria_group}} mode=0775
  tags:
    - provision

- name: Clone Myria repository
  git: repo="{{myria_repository_url}}" dest="{{myria_path}}" version="{{myria_branch}}" update=yes force=yes
  become: yes
  become_user: "{{myria_user}}"
  register: git
  tags:
    - provision
    - update

# TODO: remove this code and pass umask to git module when https://github.com/ansible/ansible/issues/10279 is resolved
- name: Grant primary group write permissions
  file: path="{{myria_path}}" mode="g+w" recurse=yes
  tags:
    - provision

- name: Check for Myria binaries
  stat: path="{{myria_jar}}"
  register: myria_jar_stat
  tags:
    - provision
    - update

- name: Compile Myria
  become: yes
  become_user: "{{myria_user}}"
  command: "./gradlew --refresh-dependencies clean shadowJar"
  args:
    chdir: "{{myria_path}}"
  when: git.changed or (not (myria_jar_stat.stat.exists))
  tags:
    - provision
    - update

- name: Create deployment configuration file (atomically)
  become: yes
  become_user: "{{myria_user}}"
  shell: "TEMPFILE=$(mktemp) &&
          ./create_deployment.py {{myria_path}} {{ hostvars[groups['coordinator'][0]]['private_dns_name'] }} \
                                                    {% for host in groups['workers'] %} {% for _ in range((WORKERS_PER_NODE|int)) %} {{ hostvars[host]['private_dns_name'] }} {% endfor %} {% endfor %}
                                                    --rest-port {{myria_rest_port}} \
                                                    --coordinator-port {{coordinator_port}} \
                                                    --worker-base-port {{worker_base_port}} \
                                                    --database-password {{database_password}} \
                                                    --heap-memory-fraction {{heap_mem_fraction}} \
                                                    --driver-memory-size-gb {{driver_mem_gb}} \
                                                    --master-memory-size-gb {{coordinator_mem_gb}} \
                                                    --worker-memory-size-gb {{worker_mem_gb}} \
                                                    --master-cores-number {{coordinator_vcores}} \
                                                    --worker-cores-number {{worker_vcores}} \
                                                    --worker-databases {% for i in range((WORKERS_PER_NODE|int) * (groups['workers']|length)) %} myria_{{i+1}} {% endfor %} \
                                                    --persist-uri {{persist_uri}} \
                                                    {{ELASTIC_MODE | ternary('--elastic-mode', '')}} \
                                                    --num-partitions {{(WORKERS_PER_NODE|int) * ((CLUSTER_SIZE|int)-1)}}
          > ${TEMPFILE} && mv ${TEMPFILE} {{myria_path}}/myriadeploy/deployment.cfg"
  args:
    chdir: "{{myria_path}}/myriadeploy"
    # creates: "{{myria_path}}/myriadeploy/deployment.cfg"
  notify: restart myria
  tags:
    - configure
    - update-workers

- name: Install Myria service
  template: src=service.conf.j2 dest=/etc/init/myria.conf backup=yes mode=0644
  notify: restart myria
  tags:
    - configure

- name: Bounce Myria service on update
  command: /bin/true
  notify: restart myria
  when: git.changed
  tags:
    - update
