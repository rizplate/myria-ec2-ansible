---
##
###installing and configuring postgres for myria
## 

- name: Adding APT repository key
  when: ansible_os_family == 'Debian'
  apt_key: id="ACCC4CF8" url="https://www.postgresql.org/media/keys/ACCC4CF8.asc"
  tags:
    - provision

- name: Add PostgreSQL official APT repository
  when: ansible_os_family == 'Debian'
  apt_repository: repo="deb http://apt.postgresql.org/pub/repos/apt/ {{ansible_distribution_release}}-pgdg main"
  tags:
    - provision

- name: Install PostgreSQL
  when: ansible_os_family == 'Debian'
  apt: name="postgresql-{{postgres_version}}" state=present update_cache=yes cache_valid_time=3600
  tags:
    - provision

- name: Install dependencies for the Ansible postgres module
  when: ansible_os_family == 'Debian'
  apt: name="{{item}}" state=latest
  with_items:
    - python-psycopg2
    - libpq-dev
  tags:
    - provision

- name: reset the cluster - drop the existing one
  shell: "pg_dropcluster --stop {{ postgres_version }} {{ postgres_legacy_cluster_name }}"
  args:
    removes: "{{ postgres_legacy_data_dir }}"
  notify: restart postgresql
  tags:
    - configure

- name: reset the cluster - create a new one (with specified encoding and locale)
  command: 'pg_createcluster --start --user=postgres --group=postgres --locale {{ postgres_locale }} -e {{ postgres_encoding }} -d {{ postgres_data_dir }} {{ postgres_version }} {{ postgres_cluster_name }}'
  args:
    creates: "{{ postgres_data_dir }}"
  notify: restart postgresql
  tags:
    - configure

- name: altering postgresql.conf - adding listeners
  lineinfile: dest=/etc/postgresql/{{postgres_version}}/{{postgres_cluster_name}}/postgresql.conf
              regexp="^[#]?listen_addresses"
              line="listen_addresses = '*'"
              state=present
  notify: restart postgresql
  tags:
    - configure

- name: altering pg_hba.conf - adding listeners
  lineinfile: dest=/etc/postgresql/{{postgres_version}}/{{postgres_cluster_name}}/pg_hba.conf
              line="host    all   all        0.0.0.0/0   trust"
              state=present
  notify: restart postgresql
  tags:
    - configure

- name: altering postgresql.conf - changing shared_buffers
  lineinfile: dest=/etc/postgresql/{{postgres_version}}/{{postgres_cluster_name}}/postgresql.conf
              regexp="^[#]?shared_buffers"
              line="shared_buffers = {{shared_buffers_mb}}MB"
              state=present
  notify: restart postgresql
  tags:
    - configure

- name: altering postgresql.conf - changing work_mem
  lineinfile: dest=/etc/postgresql/{{postgres_version}}/{{postgres_cluster_name}}/postgresql.conf
              regexp="^[#]?work_mem"
              line="work_mem = {{work_mem_mb}}MB"
              state=present
  notify: restart postgresql
  tags:
    - configure

- name: altering postgresql.conf - changing temp_tablespaces
  lineinfile: dest=/etc/postgresql/{{postgres_version}}/{{postgres_cluster_name}}/postgresql.conf
              regexp="^[#]?temp_tablespaces"
              line="temp_tablespaces = '{% set comma = joiner(", ") %}{% for i in range((EPHEMERAL_VOLUMES|length)) %}{{comma()}}temp_{{i+1}}{% endfor %}'"
              state=present
  notify: restart postgresql
  tags:
    - configure

- name: Create tablespace directories on each ephemeral volume
  file: path="{{ephemeral_mount_point_prefix}}{{item.0+1}}/postgresql/data" state=directory recurse=yes mode=0755 owner='postgres' group='postgres'
  with_indexed_items: "{{ EPHEMERAL_VOLUMES }}"
  tags:
    - configure

- name: Create tablespace directories on each EBS volume
  file: path="{{ebs_mount_point_prefix}}{{item.0+1}}/postgresql/data" state=directory recurse=yes mode=0755 owner='postgres' group='postgres'
  with_indexed_items: "{{ EBS_VOLUMES }}"
  tags:
    - configure

- name: Create tablespace symlinks for each ephemeral volume
  file: src="{{ephemeral_mount_point_prefix}}{{item.0+1}}/postgresql/data" dest=/pg_temp{{item.0+1}} state=link force=yes mode=0755 owner='postgres' group='postgres'
  with_indexed_items: "{{ EPHEMERAL_VOLUMES }}"
  tags:
    - configure

- name: Create tablespace symlinks for each EBS volume
  file: src="{{ebs_mount_point_prefix}}{{item.0+1}}/postgresql/data" dest=/pg_data{{item.0+1}} state=link force=yes mode=0755 owner='postgres' group='postgres'
  with_indexed_items: "{{ EBS_VOLUMES }}"
  tags:
    - configure

# No Ansible module for tablespaces until https://github.com/ansible/ansible/pull/4994 is merged
- name: Create tablespaces on each ephemeral volume
  command: psql --username=postgres --port=5432 --dbname=postgres --command="CREATE TABLESPACE temp_{{item.0+1}} LOCATION '/pg_temp{{item.0+1}}';"
  become: yes
  become_user: postgres
  register: result
  failed_when: "(result | failed) and ('already exists' not in result.stderr)"
  with_indexed_items: "{{ EPHEMERAL_VOLUMES }}"
  notify: restart postgresql
  tags:
    - configure

  # No Ansible module for tablespaces until https://github.com/ansible/ansible/pull/4994 is merged
- name: Create tablespaces on each EBS volume
  command: psql --username=postgres --port=5432 --dbname=postgres --command="CREATE TABLESPACE data_{{item.0+1}} LOCATION '/pg_data{{item.0+1}}';"
  become: yes
  become_user: postgres
  register: result
  failed_when: "(result | failed) and ('already exists' not in result.stderr)"
  with_indexed_items: "{{ EBS_VOLUMES }}"
  notify: restart postgresql
  tags:
    - configure

# Can't use postgresql_db module until tablespace support (https://github.com/ansible/ansible-modules-core/pull/2220) is merged
- name: Create databases on ephemeral storage, assigning round-robin to tablespaces
  command: psql --username=postgres --port=5432 --dbname=postgres --command="CREATE DATABASE myria_{{item}} ENCODING '{{postgres_encoding}}' LC_COLLATE '{{postgres_locale}}' LC_CTYPE '{{postgres_locale}}' TABLESPACE temp_{{ ((((item|int)-1) % (WORKERS_PER_NODE|int)) % (EPHEMERAL_VOLUMES | length))+1 }};"
  become: yes
  become_user: postgres
  register: result
  failed_when: "(result | failed) and ('already exists' not in result.stderr)"
  with_items: "{{ tags['worker-id'].split(',') }}"
  when: STORAGE_TYPE == 'local'
  notify: restart postgresql
  tags:
    - configure

# Can't use postgresql_db module until tablespace support (https://github.com/ansible/ansible-modules-core/pull/2220) is merged
- name: Create databases on EBS storage, assigning round-robin to tablespaces
  command: psql --username=postgres --port=5432 --dbname=postgres --command="CREATE DATABASE myria_{{item}} ENCODING '{{postgres_encoding}}' LC_COLLATE '{{postgres_locale}}' LC_CTYPE '{{postgres_locale}}' TABLESPACE data_{{ ((((item|int)-1) % (WORKERS_PER_NODE|int)) % (EBS_VOLUMES | length))+1 }};"
  become: yes
  become_user: postgres
  register: result
  failed_when: "(result | failed) and ('already exists' not in result.stderr)"
  with_items: "{{ tags['worker-id'].split(',') }}"
  when: STORAGE_TYPE == 'ebs'
  notify: restart postgresql
  tags:
    - configure

- name: Create database user
  postgresql_user: db=myria_{{item}} name={{database_username}} password={{database_password}} priv=ALL
  become: yes
  become_user: postgres
  with_items: "{{ tags['worker-id'].split(',') }}"
  notify: restart postgresql
  tags:
    - configure
