---
# ansible-playbook "$MYRIA_ANSIBLE_DIR/site.yml" --extra-vars "$ANSIBLE_VARS" --private-key "$PRIVATE_KEY_FILE"
- name: Create AWS resources
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    wait_timeout: 3600
    spot_wait_timeout: 3600
  tasks:

  - name: Create EC2 keypair if absent
    ec2_key:
      name: "{{KEY_PAIR}}"
      profile: "{{PROFILE | default(omit)}}"
      region: "{{REGION}}"
    register: key_pair
  - name: Check for existing private key file
    stat: path="{{PRIVATE_KEY_FILE}}"
    register: private_key_file
  - name: Fail if new keypair was created but private key file already exists
    fail: msg="Keypair '{{KEY_PAIR}}' was successfully created but private key file {{PRIVATE_KEY_FILE}} already exists! Please delete or rename it, delete the keypair '{{KEY_PAIR}}' from the {{REGION}} region, and rerun the script."
    when: (key_pair.changed) and (private_key_file.stat.exists)
  - name: Fail if keypair already exists but private key file is missing
    fail: msg="Keypair '{{KEY_PAIR}}' exists in the {{REGION}} region but private key file {{PRIVATE_KEY_FILE}} is missing! Either 1) use a different keypair, 2) copy the private key file for the keypair '{{KEY_PAIR}}' to {{PRIVATE_KEY_FILE}}, or 3) delete the keypair '{{KEY_PAIR}}' from the {{REGION}} region, and rerun the script."
    when: (not (key_pair.changed)) and (not (private_key_file.stat.exists))
  - name: Save private key to file
    copy: content="{{ key_pair.key.private_key }}" dest="{{PRIVATE_KEY_FILE}}" mode=0600
    when: (key_pair.changed)

  - name: Create security group for this cluster
    ec2_group:
      name: "{{CLUSTER_NAME}}"
      description: "Myria security group"
      profile: "{{PROFILE | default(omit)}}"
      region: "{{REGION}}"
      vpc_id: "{{VPC_ID | default(omit)}}"
      rules:
      - proto: all
        from_port: 0
        to_port: 65535
        # self-reference by name so we can define the group in one pass
        # FIXME: according to AWS docs, reference by name won't work in non-default VPC (must use group_id)
        group_name: "{{CLUSTER_NAME}}"
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: "{{myria_rest_port}}"
        to_port: "{{myria_rest_port}}"
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: "{{myria_web_port}}"
        to_port: "{{myria_web_port}}"
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: "{{ganglia_web_port}}"
        to_port: "{{ganglia_web_port}}"
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: "{{jupyter_web_port}}"
        to_port: "{{jupyter_web_port}}"
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: "{{resourcemanager_web_port}}"
        to_port: "{{resourcemanager_web_port}}"
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: "{{nodemanager_web_port}}"
        to_port: "{{nodemanager_web_port}}"
        cidr_ip: 0.0.0.0/0
      rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
    register: ec2_group

  - name: Tag security group to designate as Myria cluster
    ec2_tag:
      profile: "{{PROFILE | default(omit)}}"
      region: "{{REGION}}"
      resource: "{{ec2_group.group_id}}"
      state: present
      tags:
        app: "myria"
        "user:Name": "{{IAM_USER | default(omit)}}"

  - name: Launch instances
    ec2:
      profile: "{{PROFILE | default(omit)}}"
      region: "{{REGION}}"
      zone: "{{ZONE | default(omit)}}"
      keypair: "{{KEY_PAIR}}"
      group_id: "{{ec2_group.group_id}}"
      instance_type: "{{INSTANCE_TYPE}}"
      image: "{{AMI_ID}}"
      vpc_subnet_id: "{{SUBNET_ID | default(omit)}}"
      assign_public_ip: "{{'yes' if SUBNET_ID is defined else omit}}"
      instance_profile_name: "{{ROLE | default(omit)}}"
      count: "{{CLUSTER_SIZE}}"
      spot_price: "{{SPOT_PRICE | default(omit)}}"
      spot_wait_timeout: "{{ spot_wait_timeout }}"
      # add for ansible 2.1
      #spot_launch_group: "{{CLUSTER_NAME | default(omit)}}"
      wait: yes
      wait_timeout: "{{wait_timeout}}"
      instance_tags:
        app: "myria"
        cluster-name: "{{CLUSTER_NAME | default(omit)}}"
        spot-price: "{{SPOT_PRICE | default(omit)}}"
        "user:Name": "{{IAM_USER | default(omit)}}"
      volumes: "{{all_volumes}}"
    register: ec2

  - name: List volumes
    ec2_vol:
      profile: "{{PROFILE | default(omit)}}"
      region: "{{REGION}}"
      instance: "{{ item.id }}"
      state: list
    with_items: "{{ec2.instances}}"
    register: ec2_vol

  - name: Tag volumes
    ec2_tag:
      profile: "{{PROFILE | default(omit)}}"
      region: "{{REGION}}"
      resource: "{{ item.1.id }}"
      state: present
      tags:
        app: "myria"
        cluster-name: "{{CLUSTER_NAME | default(omit)}}"
        "user:Name": "{{IAM_USER | default(omit)}}"
    with_subelements:
      - "{{ec2_vol.results}}"
      - volumes

  - name: Tag coordinator
    ec2_tag:
      profile: "{{PROFILE | default(omit)}}"
      region: "{{REGION}}"
      resource: "{{ item.id }}"
      state: present
      tags:
        Name: "{{CLUSTER_NAME}}-coordinator"
        cluster-role: coordinator
        worker-id: "0"
    with_items: "{{ec2.instances[:1]}}"

  - name: Tag workers
    ec2_tag:
      profile: "{{PROFILE | default(omit)}}"
      region: "{{REGION}}"
      resource: "{{ item.1.id }}"
      state: present
      tags:
        Name: "{{CLUSTER_NAME}}-worker-{{(item.0 * WORKERS_PER_NODE) + 1}}-{{(item.0+1) * WORKERS_PER_NODE}}"
        cluster-role: worker
        worker-id: "{{ range((item.0 * WORKERS_PER_NODE) + 1, ((item.0+1) * WORKERS_PER_NODE) + 1) | join(',') }}"
    with_indexed_items: "{{ ec2.instances[1:] | sort(attribute='private_dns_name') }}"

  - name: Write ec2.ini file for dynamic inventory
    template: src=ec2.ini.j2 dest={{ EC2_INI_PATH }}
